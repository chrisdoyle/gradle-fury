import com.sun.xml.internal.ws.util.StringUtils
import org.w3c.dom.Element

import java.lang.reflect.Method
import java.nio.charset.Charset
import java.nio.file.Files
import java.nio.file.Paths

/**
 our attempt at a maven site plugin, which uses most of the stuff that maven's

 gradle says they are working on one, but there hasn't been any activity on it in like 3 years.

 we'd love to reuse doxia, but it is a bit on the complex side and extracting it from maven was attempted
 and proved to be more difficult that writing one from scratch.

 Heavily based on the work done by Paul Speed-2 @ filament
 https://sourceforge.net/p/filament/code/HEAD/tree/trunk/site/build.gradle

 http://maven.apache.org/skins/maven-fluido-skin/


 */


buildscript{
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        // https://mvnrepository.com/artifact/org.pegdown/pegdown
        // oom errors classpath 'org.pegdown:pegdown:1.6.0'
        classpath 'com.atlassian.commonmark:commonmark:0.7.0'
        classpath 'com.atlassian.commonmark:commonmark-ext-gfm-tables:0.7.0'
        classpath 'com.atlassian.commonmark:commonmark-ext-gfm-strikethrough:0.7.0'
        classpath 'com.atlassian.commonmark:commonmark-ext-autolink:0.7.0'
        classpath 'org.apache.commons:commons-lang3:3.4'

        //no go classpath 'org.commonjava.googlecode.markdown4j:markdown4j:2.2-cj-1.1'



        classpath 'org.asciidoctor:asciidoctorj:1.5.4'
    }
}

import org.commonmark.node.*;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer

import java.text.SimpleDateFormat;

ext.webSrcDir = "${rootDir}/src/site/"
ext.buildWebsiteDir = "${rootDir}/build/site/"
ext.javadocsModules = new ArrayList<>();
ext.reports = new ArrayList<>();


task site(group: "Gradle Fury Site Generation",
        description: 'Builds the web-site contents.' )  << {
    List<File> javadocs = copyJavadocPages(rootDir,true);

    List<File> reportsDocs = copyReports(rootDir,true);


    for (int i=0; i < javadocs.size(); i++){
        System.out.println(javadocs.get(i).getAbsolutePath());
    }
    for (int i=0; i < reportsDocs.size(); i++){
        System.out.println(reportsDocs.get(i).getAbsolutePath());
    }

    copyUserSiteSrc();

    generateNavMenu();

    prepareTemplate();

    generateCannedContent(javadocs, reportsDocs);



    convertContent();


}
def prepareTemplate(){
    long time = System.currentTimeMillis();
    project.ext.siteTemplate = "";
    project.ext.siteTimestamp = time;

    String header = readFile(ext.webSrcDir + "/template.html", Charset.defaultCharset());
    header = preprocessContents(header);
    String fork = getForkMe();
    header = header.replace('${forkMeOnGitHub}', fork);

    //${generatedMenu}
    header = header.replace('${generatedMenu}', project.ext.siteMenu);

    project.ext.siteTemplate = header;





}
def convertContent(){
    processContent(new File(ext.buildWebsiteDir));

}

def processContent(File directory){

    File f= directory;
    File[] files = f.listFiles();
    for (int i=0; i < files.length; i++){
        if (files[i].isDirectory()){
            //recurse
            processContent(files[i]);
        } else if (!files[i].isHidden() && files[i].isFile()){
            processFile(files[i]);
        }
    }
}

def processFile(File file){
    if (file.getName().endsWith(".md") ) {
        //read all contents
        //process
        long start = System.currentTimeMillis();
        //write all back to the same file
        //org.pegdown.PegDownProcessor pegDownProcessor = new org.pegdown.PegDownProcessor(org.pegdown.Extensions.);
        /*org.asciidoctor.Asciidoctor asciidoctor = org.asciidoctor.Asciidoctor.Factory.create();
    Map<String, Object> asciidoctorOptions = org.asciidoctor.OptionsBuilder.options().safe(
            org.asciidoctor.SafeMode.SAFE)
            .asMap();
*/
        String contents = readFile(file.getAbsolutePath(), Charset.defaultCharset());

        contents = preprocessContents(contents);

        if (file.getName().toLowerCase().endsWith(".md")) {

            List<org.commonmark.Extension> extensions = new ArrayList<>();
            extensions.add(org.commonmark.ext.gfm.tables.TablesExtension.create());
            extensions.add(org.commonmark.ext.gfm.strikethrough.StrikethroughExtension.create());
            extensions.add(org.commonmark.ext.autolink.AutolinkExtension.create());
            Parser parser = Parser.builder().extensions(extensions).build();


            Node document = parser.parse(contents);
            HtmlRenderer renderer = HtmlRenderer.builder().extensions(extensions).build();
            contents = renderer.render(document);  // "<p>This is <em>Sparta</em></p>\n"

            String template = project.ext.siteTemplate;
            contents = template.replace('${body}', contents);

            String targetFileName = file.getAbsolutePath();
            targetFileName = targetFileName.substring(0, targetFileName.lastIndexOf(".")) + ".html"

            PrintWriter out = new PrintWriter(targetFileName);
            out.println(contents);
            out.close()
            System.out.println("Transform as markdown " + file.getAbsolutePath() + " complete in " + (System.currentTimeMillis() - start) + "ms");
            //file.delete();
        }
        /*else if (file.getName().toLowerCase().endsWith(".asciidoc")) {
        System.out.println("Transform as asciidoc " + file.getAbsolutePath());
        String contents = readFile(file.getAbsolutePath(), Charset.defaultCharset());
        contents = asciidoctor.convert(contents,asciidoctorOptions);

        //ok now we have docbook
        String targetFileName = file.getAbsolutePath();
        targetFileName = targetFileName.substring(targetFileName.lastIndexOf(".")) + ".html"
        PrintWriter out = new PrintWriter(targetFileName);
        out.println(contents);
        out.close()
        System.out.println("Transform complete in " +(System.currentTimeMillis()-start) + "ms");
    }*/ else {
            //no processing needed just output it
            PrintWriter out = new PrintWriter(file.absolutePath);
            out.println(contents);
            out.close()
        }

    }

}

/**
 * replaces variables ${something} with ext values
 * @param content
 * @return
 */
def preprocessContents(String content){

    Properties p = new Properties();
    p.load(new FileInputStream(rootDir.absolutePath + "/gradle.properties"));
    def iterator = p.entrySet().iterator();
    while (iterator.hasNext()){
        def next = iterator.next();
        content=content.replace('${' + next.getKey() + '}', next.getValue());
    }
    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
    content=content.replace('${currentYYYYMMDD}', sdf.format(new Date(project.ext.siteTimestamp)));

    sdf = new SimpleDateFormat("yyyy-MM-dd");
    content=content.replace('${currentYYYY-MM-DD}', sdf.format(new Date(project.ext.siteTimestamp)));


    return content;
}
static String readFile(String path, Charset encoding)
        throws IOException
{
    byte[] encoded = Files.readAllBytes(Paths.get(path));
    return new String(encoded, encoding);
}

def generateNavMenu(){

    StringBuilder sb = new StringBuilder();
    File[] srcs =new File(ext.webSrcDir).listFiles(new FilenameFilter() {
        @Override
        boolean accept(File file, String name) {
            if (name.toLowerCase().endsWith(".html") || name.toLowerCase().endsWith(".md") ||
                    name.toLowerCase().endsWith(".pdf"))
                return true;
            return false;
        }
    });
    if (srcs!=null){
        for (int i=0; i < srcs.length; i++){
            String file = srcs[i].getName();
            if (file.equalsIgnoreCase("template.html"))
                continue;
            if (file.equalsIgnoreCase("index.md"))
                continue;
            //trim off the extension
            file = file.substring(0,file.lastIndexOf("."));
            String name = file;
            name = name.replace("-", " ");
            name = org.apache.commons.lang3.StringUtils.join(
                    org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase(name),' ');
            name = org.apache.commons.lang3.StringUtils.capitalize(name);
            sb.append(" <li>\n" +
                    "\n" +
                    "                                <a href=\"" + file + ".html\" title=\"" + name + "\">\n" +
                    "                                    <span class=\"none\"></span>\n" +
                    "                                    " + name + "</a>\n" +
                    "                            </li>" );
        }
    }
    project.ext.siteMenu = sb.toString();

}


def generateTeamList(){
    PrintWriter out;
    String rootdir = ext.buildWebsiteDir;

    //team-list
    StringBuilder team = new StringBuilder();

    team.append('## The Team\n A successful project requires many people to play many roles. Some members write code or documentation, while others are valuable as testers, submitting patches and suggestions.\n' +
            '\n' +
            'The team is comprised of Members and Contributors. Members have direct access to the source of a project and actively evolve the code-base. Contributors improve the project through submission of patches and suggestions to the Members. The number of Contributors to the project is unbounded. Get involved today. All contributions to the project are greatly appreciated.\n\n');

    team.append("## Members\n\n" +
            "The following is a list of developers with commit privileges that have directly contributed to the project in one way or another.\n\n");


    if (hasProperty("pom.developers.developer.0.id")) {
        team.append("| Image | Id | Name | Email | Organization | Roles \n");
        team.append("| --- | --- | --- | --- | --- | --- |\n")

        // parse the roles of each developer
        for (def i = 0; hasProperty("pom.developers.developer.${i}.id"); ++i) {

            team.append("| no image | ").append(project.property("pom.developers.developer.${i}.id"));
            team.append("| ").append(project.property("pom.developers.developer.${i}.name"));
            team.append("| ").append(project.property("pom.developers.developer.${i}.email"));
            team.append("| ").append(project.property("pom.developers.developer.${i}.organization"));
            team.append("| ");

            if (hasProperty("pom.developers.developer.${i}.role.0")) {

                for (def j = 0; hasProperty("pom.developers.developer.${i}.role.${j}"); ++j) {

                    team.append(project.property("pom.developers.developer.${i}.role.${j}")).append(" ");

                }
            }
            team.append("\n");


        }

    }
    else team.append("No one was listed, check gradle.properties");

    team.append("\n\n");
    out = new PrintWriter(rootdir + "/team-list.md");
    out.println(team.toString());
    out.close()
}


def generateJavadocContent(List<File> javadocs){

    PrintWriter out;
    String rootdir = ext.buildWebsiteDir;
    //java docs
    StringBuilder javadocMarkdown = new StringBuilder();

    javadocMarkdown.append('## Javadoc\n Here\'s all the Javadocs generate for the project ${site.name}\n\n');
    javadocMarkdown.append("| Module \t| Javadocs \t|\n");
    javadocMarkdown.append("| ------ \t| -------- \t|\n")
    //String rootdir = ext.buildWebsiteDir;
    for (int i = 0; i < javadocs.size(); i++) {
        File f = javadocs.get(i);
        if (new File(f.getAbsolutePath() + "/index.html").exists()) {
            String subpath = f.getAbsolutePath().replace(rootdir, "");
            javadocMarkdown.append("| ").append(f.getName()).append(" \t| [Javadocs](").append(subpath + "/index.html").append(") \t|\n");
        } else {
            //we have variants to deal with
            File[] variants = f.listFiles();
            if (variants != null) {
                for (int k = 0; k < variants.length; k++) {
                    File variant = variants[k];
                    if (new File(variant.getAbsolutePath() + "/index.html").exists()) {
                        String subpath = variant.getAbsolutePath().replace(rootdir, "");
                        javadocMarkdown.append("| ").append(f.getName()).append(" \t| [").append(variant.getName()).append("](").append(subpath+ "/index.html").append(") \t |\n");
                    }
                }
            }
        }
    }
    javadocMarkdown.append("\n\n");
    out = new PrintWriter(rootdir + "/javadoc.md");
    out.println(javadocMarkdown.toString());
    out.close()
}


def generateReportList(List<File> reports){

    PrintWriter out;
    String rootdir = ext.buildWebsiteDir;


    //reportsMarkdown docs
    StringBuilder reportsMarkdown = new StringBuilder();

    reportsMarkdown.append('## Project Reports\n Here\'s all the Reports that were generated during the build for the project ${site.name}\n\n');
    reportsMarkdown.append("| Module \t | Report \t| Link \t|\n");
    reportsMarkdown.append("| ------ \t | ------ \t| ---- \t|\n")

    for (int i = 0; i < reports.size(); i++) {
        File f = reports.get(i);
        //f is the module name

        File[] report = f.listFiles();
        if (report != null) {
            for (int k = 0; k < report.length; k++) {
                File test = report[k];

                if (test.getName().endsWith(".html")){
                    //found a test artifact
                    String subpath = test.getAbsolutePath().replace(rootdir, "");
                    reportsMarkdown.append("| ").append(f.getName()).append(" | ").
                            append(test.getName().replace(".html","")).append(" \t| [").append(test.getName()).append("](").append(subpath).append(") \t |\n");
                }
                if (test.isDirectory() && new File(test.getAbsolutePath() + "/index.html").exists()) {
                    String subpath = test.getAbsolutePath().replace(rootdir, "");
                    reportsMarkdown.append("| ").append(f.getName()).append(" | ").
                            append(test.getName()).append(" \t| [").append(test.getName()).append("](").append(subpath+ "/index.html").append(") \t |\n");
                } else if (test.isDirectory()) {
                    //these are variants
                    File[] variants = test.listFiles();
                    if (variants!=null){
                        for (int j=0; j < variants.length; j++){
                            File index=new File(variants[j].getAbsolutePath() + "/index.html");
                            if (index.exists()){
                                String subpath = index.getAbsolutePath().replace(rootdir, "");
                                reportsMarkdown.append("| ").append(f.getName()).append(" | ").
                                        append(variants[j].getName()).append(" \t| [").append(variants[j].getName()).append("](").append(subpath).append(") \t |\n");
                            }
                        }
                    }

                }
            }
        }

    }
    reportsMarkdown.append("\n\n");
    out = new PrintWriter(rootdir + "/reports.md");
    out.println(reportsMarkdown.toString());
    out.close()
}


def generateProjectInfo(){

    PrintWriter out;
    String rootdir = ext.buildWebsiteDir;


    //reportsMarkdown docs
    StringBuilder reportsMarkdown = new StringBuilder();

    reportsMarkdown.append('## Project Information\n This document provides an overview of the various documents and links that are part of this project\'s general information. All of this content is automatically generated by [Gradle-Fury](https://github.com/chrisdoyle/gradle-fury) on behalf of the project.\n' +
            '\n\n#Modules\n\n');
    reportsMarkdown.append("| Group | Module \t |  Version \t| Description \t|\n");
    reportsMarkdown.append("| ------ \t | ------ \t| ---- \t| --- | \n")
    subprojects.each { p ->
        //note path has a : prefix
        reportsMarkdown.append("| " +  p.group + " | " +p.path.substring(1) + " | " + p.version + " | " + p.description).append(" | \n");
        //System.out.println("Group " + p.group  + p.path + ":" + p.version + " " + p.description);
        //useless System.out.println("status " + p.status);
        //System.out.println("version " + p.version);
        //println p.path
    }




    reportsMarkdown.append("\n\n");
    out = new PrintWriter(rootdir + "/project-license.md");
    out.println(reportsMarkdown.toString());
    out.close()
}


def reflect(object) {
    Method[] bits = object.class.methods
    for (int k =0; k < bits.length; k++){
        System.out.println(bits[k].name);
        for (int x= 0; x < bits[k].parameterTypes.length; x++) {
            System.out.println("\t" + bits[k].parameterTypes[x].name);
        }
    }
}


def generateCannedContent(List<File> javadocs, List<File> reports) {
    /*
    done modules list
    TODO repositories
    done artifact list?
    done  issue tracking
    TODO licenses
    done team
    done source repo
    done  ci/integration
    done reports, might be better to tie these to specific modules?

     */


    generateProjectInfo();
    generateTeamList();
    generateJavadocContent(javadocs);
    generateReportList(reports);
    generateLicenses();




}

def generateLicenses(){
    //pom.licenses.license.0.name
    PrintWriter out;
    String rootdir = ext.buildWebsiteDir;

    //team-list
    StringBuilder team = new StringBuilder();

    team.append('## Overview\n Typically the licenses listed for the project are that of the project itself, and not of dependencies.\n' +
            '\n##Project License' +
            'The team is comprised of Members and Contributors. Members have direct access to the source of a project and actively evolve the code-base. Contributors improve the project through submission of patches and suggestions to the Members. The number of Contributors to the project is unbounded. Get involved today. All contributions to the project are greatly appreciated.\n\n');


    if (hasProperty("pom.licenses.license.0.name")) {
        team.append("| Licnse | Link \t |  Distribution |\n");
        team.append("| ------ \t | ------ \t| ---- |\n")
        for (def i = 0; hasProperty("pom.licenses.license.${i}.name"); ++i) {

            team.append(project.property("pom.licenses.license.${i}.name")).append(" | ");

            team.append("[").append(project.property("pom.licenses.license.${i}.url")).append("](").append(project.property("pom.licenses.license.${i}.url")).append(") | ");
            team.append((hasProperty("pom.licenses.license.${i}.distribution")
                    ? project.property("pom.licenses.license.${i}.distribution") : ""));
            team.append("\n");
        }
    }
    else team.append("No license was listed, check gradle.properties");

    team.append("\n\n");
    out = new PrintWriter(rootdir + "/project-license.md");
    out.println(team.toString());
    out.close()
}


def copyUserSiteSrc(){
    copy {
        from new File(ext.webSrcDir).absolutePath
        into ext.buildWebsiteDir
    }
}

/**
 * find and replace for all supported variables
 */
def preprocessUserSiteContent(){
    //TODO
}

List<File> copyJavadocPages(File currentDir, boolean firstRun) {

    List<File> ret = new ArrayList<>();
    File[] files = currentDir.listFiles();
    if (files != null) {
        for (int i = 0; i < files.length; i++) {
            if (firstRun && files[i].getAbsolutePath().endsWith("build"))
                continue;
            if (files[i].getAbsolutePath().endsWith("build/docs/javadoc")) {

                String[] s2 = files[i].getAbsolutePath().split("/");
                String module = s2[s2.length-4];
               // System.out.println("javadoc " + files[i].getAbsolutePath() + " " + module);
                copy {
                    from files[i].absolutePath
                    into ext.buildWebsiteDir + "/javadocs/" + module
                }
                ret.add(new File(ext.buildWebsiteDir + "/javadocs/" + module));
            } else if ( files[i].getAbsolutePath().contains("build/javadoc")){

                String[] s2 = files[i].getAbsolutePath().split("/");
                String module = s2[s2.length-3];
                copy {
                    from files[i].absolutePath
                    into buildWebsiteDir + "/javadocs/" + module
                }
                ret.add(new File(buildWebsiteDir + "/javadocs/" + module));
            }
            else if (files[i].isDirectory() &&
                    !files[i].isHidden()) {
                        ret.addAll(copyJavadocPages(files[i],false));
            }
        }
    }
    return ret;
    //search for build/docs/javadoc folders
    //search for build/javadoc/flavorDebug/Release folders
    //search for build/javadoc/debug/release folders
}



List<File> copyReports(File currentDir, boolean firstRun) {

    List<File> ret = new ArrayList<>();
    File[] files = currentDir.listFiles();
    if (files != null) {
        for (int i = 0; i < files.length; i++) {
            if (firstRun && files[i].getAbsolutePath().endsWith("build"))
                continue;
                if (files[i].getAbsolutePath().endsWith("build/reports")) {

                String[] s2 = files[i].getAbsolutePath().split("/");
                String module = s2[s2.length-3];
                //System.out.println("report " + files[i].getAbsolutePath() + " " + module);
                copy {
                    from files[i].absolutePath
                    into ext.buildWebsiteDir + "/reports/" + module
                }
                ret.add(new File(ext.buildWebsiteDir + "/reports/" + module));
                //ret.add(files[i]);
            } else if (files[i].getAbsolutePath().contains("build/outputs")) {
                String[] s2 = files[i].getAbsolutePath().split("/");
                String module = s2[s2.length-3];
               // System.out.println("report " + files[i].getAbsolutePath() + " " + module);
                copy {
                    from files[i].absolutePath
                    into ext.buildWebsiteDir + "/reports/" + module
                    include '*.html'
                    include 'lint*/**'
                }
                    ret.add(new File(ext.buildWebsiteDir + "/reports/" + module));
                //ret.add(files[i]);

            }
            else if (files[i].isDirectory() &&
                    !files[i].isHidden()) {
                        ret.addAll(copyReports(files[i],false));
                    }
        }
    }
    return ret;
    //search for build/docs/javadoc folders
    //search for build/javadoc/flavorDebug/Release folders
    //search for build/javadoc/debug/release folders
}


def getForkMe(){
    Properties p = new Properties();
    p.load(new FileInputStream(rootDir.absolutePath + "/gradle.properties"));

    //System.out.println(p.getProperty("site.forkMe.enable"));
    //System.out.println(p.getProperty("pom.scm.url"));


    if (p.containsKey("site.forkMe.enable") &&
        p.getProperty("site.forkMe.enable").equalsIgnoreCase("true") &&
        p.containsKey("pom.scm.url") &&
        p.getProperty("pom.scm.url").contains("https://github.com")){
        return "<a href=\"" + p.getProperty("pom.scm.url") + "\">\n" +
                "    <img style=\"position: absolute; top: 0; right: 0; border: 0; z-index: 10000;\"\n" +
                "    src=\"./img/forkme_right_gray_6d6d6d.png\"\n" +
                "    alt=\"Fork me on GitHub\">\n" +
                "    </a>";
    }
    return "";
}