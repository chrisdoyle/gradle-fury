import com.github.spyhunter99.dex.model.*
import org.apache.commons.lang3.StringEscapeUtils

import java.nio.charset.Charset
import java.nio.file.Files
import java.nio.file.Paths

/**
 *
 * The Quality plugin - runs findbugs, checkstyle, and pmd on all your projects (android and java)
 *
 * This file was mostly lifted...ehm borrowed from
 * https://github.com/MasonLiuChn/AndroidCodeQuality
 * original author Email:MasonLiuChn@gmail.com
 *
 * It originally only worked on android projects but was modified to support both android
 * and regular java/jar/war projects too.
 *
 *
 * To apply to your project, apply this file under 'allprojects'
 * then copy the files from gradle-fury/config and place it in your project
 *
 * allprojects {*        apply from 'https://raw.githubusercontent.com/chrisdoyle/gradle-fury/master/gradle/quality.gradle'
 *}*  then execute with `gradelw build`
 *
 * Since the checks can add a lot of time to your build, you probably want to make it optional...
 *
 * allprojects {*      if (project.hasProperty('profile') && project.profile.split(',').contains("ci")) {*        apply from 'https://raw.githubusercontent.com/chrisdoyle/gradle-fury/master/gradle/quality.gradle'
 *}*}*
 *  then execute with `gradelw build -Pprofile=ci`
 *
 * @since 1.0.10
 * @author Alex O'Ree
 *
 *
 *  addendum
 *  jdepend stuff came from here
 *
 *  https://github.com/azagniotov/stubby4j/blob/master/conf/gradle/jdepend.gradle
 */



apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jdepend'


//our MOTD
if (!rootProject.hasProperty('codeQuality')) {
    rootProject.ext.codeQuality = true
    println "== Quality plugin active. Hold on to your butts...";
}



buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'org.apache.commons:commons-lang3:3.4'
        classpath 'commons-io:commons-io:2.5'
        classpath 'com.github.spyhunter99:dex-method-counts-lib:2.1.1'
    }
}


ext.checkStyleEnable = (
        hasProperty('quality.checkStyle.enable')
                ? Boolean.parseBoolean(project.property("quality.checkStyle.enable"))
                : true
);
ext.checkStyleIgnoreFailures = (
        hasProperty('quality.checkStyle.ignoreFailures')
                ? Boolean.parseBoolean(project.property("quality.checkStyle.ignoreFailures"))
                : true
);


ext.findbugsEnable = (
        hasProperty('quality.findbugs.enable')
                ? Boolean.parseBoolean(project.property("quality.findbugs.enable"))
                : true
);
ext.findbugsIgnoreFailures = (
        hasProperty('quality.findbugs.ignoreFailures')
                ? Boolean.parseBoolean(project.property("quality.findbugs.ignoreFailures"))
                : true
);
ext.findbugsEffort = (
        hasProperty('quality.findbugs.effort')
                ? project.property("quality.findbugs.effort")
                : "max"
);
ext.findbugsReportLevel = (
        hasProperty('quality.findbugs.reportLevel')
                ? project.property("quality.findbugs.reportLevel")
                : "high"
);

//TODO
//filter
//excludes
//ignoreFailures
//excludeFilter


ext.pmdEnable = (
        hasProperty('quality.pmd.enable')
                ? Boolean.parseBoolean(project.property("quality.pmd.enable"))
                : true
);
ext.pmdIgnoreFailures = (
        hasProperty('quality.pmd.ignoreFailures')
                ? Boolean.parseBoolean(project.property("quality.pmd.ignoreFailures"))
                : true
);
//TODO rulePriority


ext.jdependEnable = (
        hasProperty('quality.jdepend.enable')
                ? Boolean.parseBoolean(project.property("quality.jdepend.enable"))
                : true
);
ext.jdependIgnoreFailures = (
        hasProperty('quality.jdepend.ignoreFailures')
                ? Boolean.parseBoolean(project.property("quality.jdepend.ignoreFailures"))
                : true
);




ext.dexcountEnable = (
        hasProperty('quality.dexcount.enable')
                ? Boolean.parseBoolean(project.property("quality.dexcount.enable"))
                : true
);
//no options to configure

ext.javancssEnable = (
        hasProperty('quality.javancss.enable')
                ? Boolean.parseBoolean(project.property("quality.javancss.enable"))
                : true
);
//"$rootDir/config/javancss/javancss2html.xsl"
//TODO javancess version 33.54
//javancss






/*
######                    #####
#     # ###### #    #    #     #  ####  #    # #    # #####
#     # #       #  #     #       #    # #    # ##   #   #
#     # #####    ##      #       #    # #    # # #  #   #
#     # #        ##      #       #    # #    # #  # #   #
#     # #       #  #     #     # #    # #    # #   ##   #
######  ###### #    #     #####   ####   ####  #    #   #
 */

//dex count report APKs only for now
task dexCountReport() << {

    File outdir = new File("${buildDir}/reports/dex-count/");

    if (project.plugins.hasPlugin("com.android.application")) {

        outdir.mkdirs();

        //List<String> apks = new ArrayList<>();
        File[] list = new File(buildDir.absolutePath + "/outputs/apk/").listFiles(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                if (name.endsWith(".apk") && !name.contains("-unaligned"))
                    return true;
                return false;
            }
        });
        if (list != null && list.length > 0) {
            String[] files = new String[list.length];
            for (int i = 0; i < list.length; i++) {
                files[i] = list[i].absolutePath;
            }

            def dexcount = new com.github.spyhunter99.dex.Main();
            dexcount.enableStdOut(false)
            dexcount.enableFileOutput(true)
            dexcount.setOutputDirectory(outdir)
            dexcount.run(files);
            List<CountData> results = dexcount.getData()
            for (int k = 0; k < results.size(); k++) {
                if (results.get(k).overallMetrics.methodCount > 60000 && 65536 < results.get(k).overallMetrics.methodCount) {
                    logger.warn(results.get(k).fileName + ": Method count is near the limit: " + results.get(k).overallMetrics.methodCount)
                }
                if (results.get(k).overallMetrics.fieldCount > 60000 && 65536 < results.get(k).overallMetrics.fieldCount) {
                    logger.warn(results.get(k).fileName + ": Field count is near the limit: " + results.get(k).overallMetrics.fieldCount)
                }
            }
        }
        if (list != null && list.length == 1) {
            //need to rename the singular output file to index.html
            File report = new File(outdir.absolutePath + "/dex-count-report.html");
            File index = new File(outdir.absolutePath + "/index.html");
            Files.move(report.toPath(), index.toPath(), StandardCopyOption.REPLACE_EXISTING);
        }
    }

}

//dex count report APKs only for now

/*
######
#     # ###### #####  ###### #    # #####  ###### #    #  ####  #   #
#     # #      #    # #      ##   # #    # #      ##   # #    #  # #
#     # #####  #    # #####  # #  # #    # #####  # #  # #        #
#     # #      #####  #      #  # # #    # #      #  # # #        #
#     # #      #      #      #   ## #    # #      #   ## #    #   #
######  ###### #      ###### #    # #####  ###### #    #  ####    #
 */
//<editor-fold desc="gradle dependency report">
//produce a dependency report
import java.nio.file.StandardCopyOption

task dependencyReportGradlePre() << {
    new File("${buildDir}/reports/dependencies/").mkdirs();
}

task dependencyReportGradle(type: DependencyReportTask, dependsOn: dependencyReportGradlePre) {
    projects = [project]
    outputFile = new File("${buildDir}/reports/dependencies/index.txt");
}

task dependencyReportTransform(dependsOn: dependencyReportGradle) << {
    //strip out an absolute paths
    String contents = readFile("${buildDir}/reports/dependencies/index.txt", Charset.defaultCharset());
    contents = contents.replace(rootDir.absolutePath, ".");

    //inject into template
    String template = '<html><body>${body}</body></html>';
    contents = template.replace('${body}', "<pre>" + StringEscapeUtils.escapeHtml4(contents) + "</pre>");

    //save it
    String targetFileName = "${buildDir}/reports/dependencies/index.html"
    PrintWriter out = new PrintWriter(targetFileName);
    out.println(contents);
    out.close()
}
try {
    check.dependsOn dependencyReportTransform
} catch (Throwable t) {
    logger.debug("failed to attach check on project" + project.name, t);
}

static String readFile(String path, Charset encoding)
        throws IOException {
    byte[] encoded = Files.readAllBytes(Paths.get(path));
    return new String(encoded, encoding);
}

//</editor-fold>



/*
      #                      #     #  #####   #####   #####
      #   ##   #    #   ##   ##    # #     # #     # #     #
      #  #  #  #    #  #  #  # #   # #       #       #
      # #    # #    # #    # #  #  # #        #####   #####
#     # ###### #    # ###### #   # # #             #       #
#     # #    #  #  #  #    # #    ## #     # #     # #     #
 #####  #    #   ##   #    # #     #  #####   #####   #####

 */
//<editor-fold desc="JavaNCSS">
// setup for java ncss
configurations {
    javancss
}

dependencies {
    javancss 'org.codehaus.javancss:javancss:33.54'
}
task javancss << {
    new File("${buildDir}/reports/javancss/").mkdirs()
    ant {
        taskdef name: 'javancss', classname: 'javancss.JavancssAntTask', classpath: configurations.javancss.asPath

        javancss srcdir: 'src', includes: '**/*.java', packageMetrics: 'true', classMetrics: 'true', functionMetrics: 'true', abortOnFail: false, generateReport: true, outputfile: "${buildDir}/reports/javancss/main.xml", format: 'xml'
    }

    ant.xslt(
            in: "$reporting.baseDir/javancss/main.xml",
            style: "$rootDir/config/javancss/javancss2html.xsl",
            out: "$reporting.baseDir/javancss/index.html")
}

javancss.onlyIf { file('src').exists() }
try {
    check.dependsOn javancss
} catch (Throwable t) {
    logger.debug("failed to attach check on project" + project.name, t);
}
// END setup for java ncss
//</editor-fold>






//       ######
//     # #     # ###### #####  ###### #    # #####
//     # #     # #      #    # #      ##   # #    #
//     # #     # #####  #    # #####  # #  # #    #
//     # #     # #      #####  #      #  # # #    #
//#    # #     # #      #      #      #   ## #    #
// ####  ######  ###### #      ###### #    # #####


//<editor-fold desc="jDepend">
//configure jdepend for 'normal' projects
jdepend {
    ignoreFailures = project.ext.jdependIgnoreFailures
}

task jdependReport(group: 'verification', description: 'Generates a HTML report after executing jdepend checks.') << {
    //check for 'parent' projects
    if (new File("$reporting.baseDir/jdepend/main.xml").exists()) {
        ant.xslt(
                in: "$reporting.baseDir/jdepend/main.xml",
                style: "$rootDir/config/jdepend/jdepend-report.xslt",
                out: "$reporting.baseDir/jdepend/index.html")
    }
}
try {
    check {
        dependsOn += ['jdependReport']
    }
} catch (Throwable t) {
    logger.debug("failed to attach check on project" + project.name, t);
}

//configure jdepend for 'android' projects
task jdependAndroidReport(group: 'verification', description: 'Generates a HTML report after executing jdepend checks.') << {
    //check for 'parent' projects
    if (new File("$reporting.baseDir/jdepend/main.xml").exists()) {
        ant.xslt(
                in: "$reporting.baseDir/jdepend/main.xml",
                style: "$rootDir/config/jdepend/jdepend-report.xslt",
                out: "$reporting.baseDir/jdepend/index.html")
    }
}

task jdependAndroid(type: JDepend, dependsOn: 'compileDebugSources') {
    classesDir file('build/intermediates/')
    reports {
        xml {
            destination "$reporting.baseDir/jdepend/main.xml"
        }
    }
}

jdependAndroidReport.dependsOn jdependAndroid
//</editor-fold>





//#####                               #####
//#     # #    # ######  ####  #    # #     # ##### #   # #      ######
//#       #    # #      #    # #   #  #         #    # #  #      #
//#       ###### #####  #      ####    #####    #     #   #      #####
//#       #    # #      #      #  #         #   #     #   #      #
//#     # #    # #      #    # #   #  #     #   #     #   #      #
//#####  #    # ######  ####  #    #  #####    #     #   ###### ######


//<editor-fold desc="Checkstyle">
if (project.ext.checkStyleEnable) {
//configure checkstyle for 'normal' projects
    checkstyle {
        ignoreFailures = project.ext.checkStyleIgnoreFailures
        configFile new File("${project.rootDir}/config/checkstyle/checkstyle.xml")
    }


}
//configure checkstyle for 'android' projects
task checkstyleAndroid(type: Checkstyle) {
    ignoreFailures = project.ext.checkStyleIgnoreFailures
    configFile new File("${project.rootDir}/config/checkstyle/checkstyle.xml")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**', '**/test/**'

    classpath = files()
}

//ignore failures is really "ignore errors when running checkstyle", not problems with your code
tasks.withType(Checkstyle).each { checkstyleTask ->

    checkstyleTask.doLast {
        reports.all { report ->
            System.out.println(report.destination.absolutePath + " checking report for warnings")
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ") && !checkstyleTask.ignoreFailures) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}
//</editor-fold>





//######  #     # ######
//#     # ##   ## #     #
//#     # # # # # #     #
//######  #  #  # #     #
//#       #     # #     #
//#       #     # #     #
//#       #     # ######

//<editor-fold desc="PMD">

if (project.ext.pmdEnable) {

//configure pmd for 'normal' projects
    pmd {
        ignoreFailures = project.ext.pmdIgnoreFailures
        ruleSetFiles = files("${project.rootDir}/config/pmd/pmd-ruleset.xml")
        ruleSets = []
    }
}
//configure pmd for 'android' projects
task pmdAndroid(type: Pmd) {
    ignoreFailures = project.ext.pmdIgnoreFailures
    ruleSetFiles = files("${project.rootDir}/config/pmd/pmd-ruleset.xml")
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

//NOTE to post analysis is necessary, ignore failures does it job and fails the build if something
//is wrong


//</editor-fold>








/*
#######                 ######
#       # #    # #####  #     # #    #  ####   ####
#       # ##   # #    # #     # #    # #    # #
#####   # # #  # #    # ######  #    # #       ####
#       # #  # # #    # #     # #    # #  ###      #
#       # #   ## #    # #     # #    # #    # #    #
#       # #    # #####  ######   ####   ####   ####

 */
//<editor-fold desc="findbugs">
//configure findbugs for 'normal' projects
if (project.ext.findbugsEnable) {
    findbugs {
        ignoreFailures = project.ext.findbugsIgnoreFailures
        excludeFilter = new File("${project.rootDir}/config/findbugs/findbugs-filter.xml")
        effort = project.ext.findbugsEffort
        reportLevel = project.ext.findbugsReportLevel
    }
}
//configure findbugs for 'android' projects...seriously?
task findbugsAndroid(type: FindBugs) {
    ignoreFailures = project.ext.findbugsIgnoreFailures
    excludeFilter = new File("${project.rootDir}/config/findbugs/findbugs-filter.xml")
    effort = project.ext.findbugsEffort
    reportLevel = project.ext.findbugsReportLevel
    classes = files("$project.buildDir/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/reports/findbugs/findbugs.xml"
            xml.withMessages true
        }
        html {
            destination "$project.buildDir/reports/findbugs/findbugs.html"
        }
    }
    classpath = files()
}
//NOTE to post analysis is necessary, ignore failures does it job and fails the build if something
//is wrong
//</editor-fold>




afterEvaluate {
    tasks.withType(Task).each { task ->
        task.doLast {
            if (task.name.startsWith("assemble")) {
                if (project.plugins.hasPlugin("com.android.library") || project.plugins.hasPlugin("com.android.application")) {
                    //dumpTasks(project.tasks)
                    //tasks.add(findbugsAndroid);
                    if (project.ext.findbugsEnable)
                        tasks.findByName("findbugsAndroid").execute()
                    if (project.ext.pmdEnable)
                        tasks.findByName('pmdAndroid').execute();
                    if (project.ext.checkStyleEnable)
                        tasks.findByName('checkstyleAndroid').execute();
                    tasks.findByName('jdependAndroid').execute();
                    tasks.findByName('jdependAndroidReport').execute();
                }
                if (project.plugins.hasPlugin("com.android.application")) {
                    tasks.findByName('dexCountReport').execute();
                }
            }
        }
    }
}


tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
        //html.stylesheet resources.text.fromFile('config/xsl/findbugs-custom.xsl')
    }
}





def dumpTasks(TaskExecutionGraph graph) {
    List<Task> allTasks = graph.getAllTasks();
    for (int i = 0; i < allTasks.size(); i++) {
        System.out.println("TASK DUMP " + allTasks.get(i).name);
    }

}


def dumpTasks(TaskContainer graph) {
    List<Task> allTasks = graph.all {

        System.out.println("TASK DUMP " + it.name);
    }


}