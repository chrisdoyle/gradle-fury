import javax.crypto.Cipher
import javax.crypto.KeyGenerator
import javax.crypto.SecretKey
import javax.crypto.spec.SecretKeySpec
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import java.io.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import groovy.swing.SwingBuilder;

/**=================================================================================================
 * Common Gradle script encryption support
 *
 * @author Alex O'Ree
 =================================================================================================*/


// Issue 67 support password encryption,decryption

task generateMasterKey << {

    int keysize=256;
    KeyGenerator kgen;
    String masterKey=null;
    boolean success=false;
    try {
        kgen = KeyGenerator.getInstance("AES");
        kgen.init(keysize);
        SecretKey skey = kgen.generateKey();
        byte[] raw = skey.getEncoded();
        masterKey = asHex(raw);
        System.out.println("Master Key (AES256) generated, put this in one of your local.properties file:\n" +
                "FURY_MASTER_PASSWORD=" + masterKey);
        success=true;
    }catch (Exception ex){
        logger.info("Error generating 256bit key", ex);
    }
    if (!success) {
        keysize = 128;
        try {
            kgen = KeyGenerator.getInstance("AES");
            kgen.init(keysize);
            SecretKey skey = kgen.generateKey();
            byte[] raw = skey.getEncoded();
            masterKey = asHex(raw);
            System.out.println("Master Key (AES128) generated, put this in one of your local.properties file:\n" +
                    "FURY_MASTER_PASSWORD=" + masterKey);
            System.out.println("I couldn't do AES256, you probably need to install the Java JCE, good luck!");
        } catch (Exception ex) {
            logger.info("Error generating 128bit key", ex);
        }
    }
    if (success) {
        //TODO write to userDir/.gradle/
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        properties.setProperty("FURY_MASTER_PASSWORD", masterKey);
        properties.store(project.rootProject.file('local.properties'), "");

    } else {
        System.out.println("failed to generate a master key, run again with -i for more information")
    }
}

/**
 * mvn --encrypt-password
 */
task encryptPassword << {
    String key=loadKey();
    String password="";
    if (key==null || key.length()==0){
        throw new Exception("You must run 'gradlew generateMasterKey to create a master key first!")
    }
    def console = System.console()
    System.out.println("using master key " + key);
    if (console) {
        password = console.readPassword('> Enter Password: ')
        String cipher=encrypt(password, key);
        System.out.println("Cipher Text is\n\t {" + cipher + "}");
    } else {

        new SwingBuilder().edt {
            dialog(modal: true, title: 'Enter password', alwaysOnTop: true, resizable: false, locationRelativeTo: null, pack: true, show: true) {
                vbox { // Put everything below each other
                    label(text: "Please enter password:")
                    def input1 = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        password = new String(input1.getPassword());    //getPassword doesn't return a string
                        dispose();
                    })
                }
            }
        }
        String cipher=encrypt(password, key);
        System.out.println("Cipher Text is\n\t {" + cipher + "}");

        //throw new Exception("Cannot get console. Try again with --no-daemon")
    }
}

def asHex(byte[] buf) {

    //return new String(buf);
    StringBuilder strbuf = new StringBuilder(buf.length * 2);
    int i;

    for (i = 0; i < buf.length; i++) {
        if (((int) buf[i] & 0xff) < 0x10) {
            strbuf.append("0");
        }

        strbuf.append(Long.toString((int) buf[i] & 0xff, 16));
    }

    return strbuf.toString();
}


def  hexToBytes(String s) {
    //return s.getBytes();
    return hexToBytes(s.toCharArray());
}

def loadKey(){
    //defined in the project gradle.properties file
    if (hasProperty('FURY_MASTER_PASSWORD')){
        return FURY_MASTER_PASSWORD
    }
    //defined in rooDir/local.properties file
    Properties properties = new Properties()
    File file = project.rootProject.file('local.properties');
    if (file.exists()) {
        properties.load(file.newDataInputStream())
        if (properties.containsKey("FURY_MASTER_PASSWORD"))
            return properties.getProperty("FURY_MASTER_PASSWORD");
    }
    //TODO other options?

    return "";
}

def encrypt(String clearText, String key){
    byte[] raw = hexToBytes(key); //
    SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
    // Instantiate the cipher
    Cipher cipher = Cipher.getInstance("AES");
    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
    byte[] encrypted = cipher.doFinal(clearText.getBytes());
    return asHex(encrypted);
}



def  hexToBytes(char[] hex) {
    int length = hex.length / 2;
    byte[] raw = new byte[length];
    for (int i = 0; i < length; i++) {
        int high = Character.digit(hex[i * 2], 16);
        int low = Character.digit(hex[i * 2 + 1], 16);
        int value = (high << 4) | low;
        if (value > 127) {
            value -= 256;
        }
        raw[i] = (byte) value;
    }
    return raw;
}